#+title: Programming Level-up
#+SUBTITLE: An Introduction to Matplotlib
#+author: Jay Morgan
#+startup: beamer
#+include: ./header.org
#+PROPERTY: header-args:python :results pp output :session :exports both :eval never-export

#+name: commentify
#+begin_src emacs-lisp :var result="" :exports none
(with-output-to-string
  (princ "Results: \n")
  (dolist (result-item (split-string result "\n"))
    (princ (concat "# => " (format "%s\n" result-item)))))
#+end_src

#+RESULTS: commentify
: Results: 
: # => 

* Matplotlib

#+begin_src python :session plotting-numpy :exports none :results none
import matplotlib; matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
#+end_src

** Introduction

*** What is Matplotlib?

#+ATTR_HTML: :width 200px
#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/matlogo.png]]

In summary:
- Matplotlib is one of the defacto plotting libraries for Python. While there
  are many others and certainly some that are built for specific plot types,
  Matplotlib continues to pervade scientific plotting.
- You can create basic plots (such as line or scatter plots) to more complicated
  plots that include interactivity.

*** Installing and importing Matplotlib

Matplotlib can be installed via conda:

#+begin_src bash
conda install matplotlib
#+end_src

or with pip:

#+begin_src bash
pip install matplotlib
#+end_src

Remember! You can install packages in ipython REPL/juypter notebook by
inserting a '!' to the beginning of a shell command.

*** Basic plotting

First, we will import the matplotlib module. The plotting function is located
within the =pyplot= package within matplotlib. The use of this package is so
common that 99% of Python users will alias this import as =plt=:

#+begin_src python
import matplotlib.pyplot as plt
#+end_src

With this package now imported, we can now use the =plot= function. To begin with,
let's just plot a simple line chart. In this case, the =plot= function takes an =x=
and =y= argument, where =x= denotes the values along the x-axis and =y= are the values
along the y-axis.

#+begin_src python :session plotting-numpy :results none
x = np.linspace(-10, 10, 100)
y = np.sin(x)
plt.plot(x, y)
#+end_src

In this example, we have created two vectors. The first =x=, creates a vector of
100 values from -10 to 10. =y= is the sin function applied to =x=. Finally, in the
third line, we plot the sin wave using these two vectors.

#+begin_src python :session plotting-numpy :exports none :results none
plt.savefig("images/basic.png")
#+end_src

*** Basic plotting

#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/basic.png]]

** Various plotting types

*** Different types of Plots

#+ATTR_HTML: :width 100px
#+ATTR_LATEX: :width 0.6\textwidth
[[file:images/plots.png]]

There are many different types of plots that one can make using
matplotlib. These include the most popular:

- Line plots
- Scatter plots
- Bar plots
- Histograms
- Box plots
- Image plots

We're going to take a look at how we create each type of plot, examining what
type of inputs they require.

*** Line plots

We've already seen one example of a line plot. This plot draws a line between
each x,y point. For instance in the previous example, we created a sin wave by
'sampling' such wave using 100 samples from -10 to 10. Let's see what happens
when we sample only 10 points:

#+begin_src python :session plotting-numpy :results none
x = np.linspace(-10, 10, 10)
y = np.sin(x)
plt.plot(x, y)
#+end_src

*** Line plots

We see the results are a less than ideal representation of a sin wave as =plot=
will simply draw a straight line from each point.

#+begin_src python :session plotting-numpy :exports results :results none :file images/lineplot.png
plt.savefig("images/lineplot.png")
#+end_src

#+ATTR_LATEX: :width 0.6\textwidth
#+RESULTS:
[[file:images/lineplot.png]]

*** Scatter plots

If we want to see where each sample of the sin wave is, we could use instead the
scatter plot, which will (by default) place a small circle at every x,y
value. To create a scatter plot, we use =scatter= instead of the =plot=
function. The arguments to this function are the same, however.

#+begin_src python :session plotting-numpy :results none
x = np.linspace(-10, 10, 10)
y = np.sin(x)
plt.scatter(x, y)
#+end_src

*** Scatter plots

Now we can see the position of each individual sample from the sin wave. If we,
once again, sample 100 points from this curve, we will see better results.

#+begin_src python :session plotting-numpy :results none :file images/scatter.png :exports none
plt.savefig("images/scatter.png")
#+end_src

#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/scatter.png]]

*** Scatter plots

#+begin_src python :session plotting-numpy :results none :exports code
x = np.linspace(-10, 10, 100)
y = np.sin(x)
plt.scatter(x, y)
#+end_src

#+begin_src python :session plotting-numpy :file images/scatter-2.png :exports none
plt.savefig("images/scatter-2.png")
#+end_src

#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/scatter-2.png]]

*** Bar plots

Bar plots are a simple plot that again takes an =x= and a =y=, where x is the
numerical position of the bar's centre, and =y= is the height of the bar.

#+begin_src python :session plotting-numpy :export code :results none
x = np.arange(0, 8)
y = np.random.uniform(2, 7, len(x))
plt.bar(x, y)
#+end_src

#+begin_src python :session plotting-numpy :exports none :results none
plt.savefig("images/bar.png")
#+end_src

#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/bar.png]]

*** Histograms

Histograms allow us to visualise the distribution of values. In matplotlib, we
can create a histogram of a vector by using the =hist= function that takes only
the vector as its argument.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.random.randn(1000)
plt.hist(x)
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/hist.png")
#+end_src

#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/hist.png]]

*** Box plots

Box plots also allow us to visualise the distribution, but the distribution of
values within a group. In this example we're visualising the distribution of 3
groups. Using the =boxplot= function, we pass a matrix.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.random.randn(10, 3)
plt.boxplot(x)
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/boxplot.png")
#+end_src

#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/boxplot.png]]

*** Image plots

In matplotlib, we can plot an 'image' -- that is a 2D matrix -- using the =imshow=
function. For example:

#+begin_src python :session plotting-numpy :results none :exports code
fig = plt.figure()
x = np.random.randn(10, 10)
plt.imshow(x)
#+end_src

#+begin_src python :session plotting-numpy :exports none :results none
plt.savefig("images/imshow.png")
#+end_src

#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/imshow.png]]

*** Image plots

Of course, given the name, we can then use =imshow= to plot an image as well, as
long as we have the image loaded as a 2D array of values.

#+begin_src python :session plotting-numpy :exports code :results none
import PIL  # using the PIL module to read an image
img = np.array(PIL.Image.open("images/Lenna.png"))
plt.imshow(img)
#+end_src

#+begin_src python :session plotting-numpy :exports none :results none
plt.savefig("images/imshow-2.png")
#+end_src

#+ATTR_LATEX: :width 0.5\textwidth
[[file:images/imshow-2.png]]

*** 3 dimensional plots

3 dimensional plots require us to import another module from
matplotlib.

#+begin_src python :session plotting-numpy :results none
from mpl_toolkits import mplot3d
#+end_src

After importing this module, we can using the /projection="3d"/ and
carry on plotting as normal.

#+begin_src python :session plotting-numpy
fig = plt.figure()
ax = fig.gca(projection='3d')
theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)
z = np.linspace(-2, 2, 100)
r = z**2 + 1
x = r * np.sin(theta)
y = r * np.cos(theta)
ax.plot(x, y, z, label='parametric curve')
ax.legend()
#+end_src

*** 3 dimensional plots

#+ATTR_ORG: :width 200px
#+ATTR_HTML: :width 600px
#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/3d-figure.png]]

#+RESULTS:

*** Different types of Plots

There are many more different types of plots you can make using matplotlib. You
can find a comprehensive list at:

https://matplotlib.org/stable/plot_types/index.html

** Customising plots

*** Subplots

What if we wanted to create many plots side-by-side? For this we can use the
=subplots= function. This function takes the number of rows, and number of columns
to create. It returns two values, the first is the figure (entire figure), and
the second value is a list of sub figures. Using this list, we can place a plot
of each of them.

#+begin_src python :session plotting-numpy :results none
x = np.linspace(-10, 10, 100)
y = np.sin(x)
z = np.cos(y)

fig, ax = plt.subplots(1, 2)
# ax is a list of sub figures
ax[0].plot(x, y)
ax[1].plot(x, z)
#+end_src

#+begin_src python :session plotting-numpy :exports none :results none
plt.savefig("images/subplots.png")
#+end_src

*** Subplots

#+ATTR_LATEX: :width 0.6\textwidth
[[file:images/subplots.png]]

*** Adding a legend

Or we could put them onto the same plot. Matplotlib will automatically give them
a different colour. If we use the =label= argument to =plot=, we can also give them
a name that will appear when we call =legend()=.

#+begin_src python :session plotting-numpy :results none
x = np.linspace(-10, 10, 100)
y = np.sin(x)
z = np.tan(y)
fig, ax = plt.subplots()
ax.plot(x, y, label="sin(x)")
ax.plot(x, z, label="tan(x)")
ax.legend()
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/legend.png")
#+end_src

*** Adding a legend

#+ATTR_LATEX: :width 0.7\textwidth
[[file:images/legend.png]]

*** Position the legend in different places

We can change the position of the legend by specifying a different integer value
for the =loc= argument (or string values such as 'upper left', 'upper right',
...). Additionally, we can change the number of columns the legend has with the
=ncol= argument.

#+begin_src python :session plotting-numpy :results none
x = np.linspace(-10, 10, 100)
y = np.sin(x)
z = np.tan(y)

fig, ax = plt.subplots()
ax.plot(x, y, label="sin(x)")
ax.plot(x, z, label="tan(x)")
ax.legend(loc=1, ncol=2)
#+end_src

You can find the API reference for the different arguments to legend at: https://matplotlib.org/stable/api/legend_api.html?highlight=legend#module-matplotlib.legend

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/legend-2.png")
#+end_src

*** Position the legend in different places

#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/legend-2.png]]

*** Modifying the x/y axis

Good graphs always have their axis's labelled. To do this in matplotlib, if we
have a subplot object, we use =set_xlabel=, or we can use =plt.xlabel(...)=. Here is
an example with an subplot object:

#+begin_src python :session plotting-numpy :results none
x = np.linspace(-10, 10, 100)
y = np.sin(x)
z = np.tan(y)

fig, ax = plt.subplots()
ax.plot(x, y, label="sin(x)")
ax.plot(x, z, label="tan(x)")
ax.legend(loc=1, ncol=2)
ax.set_xlabel("x")
ax.set_ylabel("y")
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/axis.png")
#+end_src

*** Modifying the x/y axis

#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/axis.png]]

*** Changing figure size

A common change you may want to make to your figure is to change its size or
aspect ratio. =figure()= or =subplots()= take an optional argument called
=figsize=. This argument expects a tuple representing the width and height of the
figure in inches.

#+begin_src python :session plotting-numpy :results none
fig = plt.figure(figsize=(8, 2.5))

# or most likely
fig, ax = plt.subplots(figsize=(8, 2.5))
x = np.linspace(-10, 10, 100)
y = np.sin(x)
z = np.tan(y)
ax.plot(x, y, label="sin(x)")
ax.plot(x, z, label="tan(x)")
ax.legend(loc=1, ncol=2)
ax.set_xlabel("x")
ax.set_ylabel("y")
#+end_src

Here we are creating a figure with 8 inches of width, and 2.5 inches of height.

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/fig-size.png")
#+end_src

*** Changing figure size

#+ATTR_LATEX: :width 0.8\textwidth


[[file:images/fig-size.png]]

*** Changing figure size

This is especially useful when you have many sub-figures, as by default, they
will be 'squashed' into the default aspect ratio. We can 'give them more space'
by modifying this =figsize= argument when creating the many sub-figures.

#+begin_src python :session plotting-numpy :results none
fig, ax = plt.subplots(1, 2, figsize=(8, 2.5))
x = np.linspace(-10, 10, 100)
y = np.sin(x)
z = np.tan(y)
ax[0].plot(x, y, label="sin(x)")
ax[1].plot(x, z, label="tan(x)")
#+end_src

#+begin_src python :session plotting-numpy :exports none
plt.savefig("images/figsize-2.png")
#+end_src

*** Changing figure size

#+ATTR_LATEX: :width 0.9\textwidth
[[file:images/figsize-2.png]]

*** Line properties

When creating a plot, there are many different properties you can change. Some
of these include:

- color -- the colour of the line
- alpha -- the amount of transparency (1.0 is opaque, 0.0 is transparent)
- linewidth, lw -- the width of the stroke width
- linestyle, ls -- the style of the line (i.e. a dotted line)

There are also some properties for the markers, i.e. the circles in the scatter
plot. These properties are:

- marker -- the type of marker (you can use different shapes instead of a circle
- markersize -- the size of the mark
- markerfacecolor -- colour of the marker
- markeredgewidth -- outline width of the marker.

*** Line properties

If this example we are modifying some of the line properties that include the
color (c), setting it to a string value of "green". The linewidth (lw) to be
thicker, and making the line to be a dotted line by specifying the linestyle
(ls) to "=--={".

#+begin_src python :session plotting-numpy :results none
fig = plt.figure()
x = np.linspace(-5, 5, 100)
y = np.sin(x)
plt.plot(x, y,
         c="green", # or color
         lw=3, # or linewidth
         ls="--")
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/linestyles.png")
#+end_src

#+ATTR_LATEX: :width 0.4\textwidth
[[file:images/linestyles.png]]
  
*** Colormaps

When we create a heatmap using =imshow=, the gradients of colour are automatically
set. Yet, we can control the colour gradient using a colour map. First we must
import =cm= from matplotlib:

#+begin_src python :session plotting-numpy :results none :exports code
from matplotlib import cm
#+end_src

Then we can get a colour map with 10 levels using =get_cmap=:

#+begin_src python :session plotting-numpy :results none :exports code
blues = cm.get_cmap("Blues", 10) # 10 levels
reds = cm.get_cmap("Reds", 2) # 2 levels
#+end_src

You can find a full list of different colour maps at: https://matplotlib.org/stable/tutorials/colors/colormaps.html

*** Colourmaps

Now that we have our new colour maps, we can pass it as an =cmap= argument when we
create a plot.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.random.randn(10, 10)
y = np.random.randn(10, 10)
fig, ax = plt.subplots(1, 2, figsize=(8, 3))
p1 = ax[0].imshow(x, cmap=blues)
p2 = ax[1].imshow(y, cmap=reds)
fig.colorbar(p1, ax=ax[0])
fig.colorbar(p2, ax=ax[1])
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/colourmaps.png")
#+end_src

#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/colourmaps.png]]

*** Ticks

If we want to customise the numbers along each axis, we use the =set_xticks= for
the x-axis and =set_yticks= for the y-axis. These functions take the list of
locations for each 'tick', and optionally a list of labels to use instead of the numbers.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.linspace(-2, 2, 100)
y = np.sin(x)

bx = np.arange(2, 7)
by = np.random.uniform(2, 7, len(bx))

fig, ax = plt.subplots(1, 2, figsize=(8, 3))
ax[0].plot(x, y)
ax[0].set_xticks([-2, 0, 2])
ax[1].bar(bx, by)
ax[1].set_xticks(bx, ["a", "b", "c", "d", "e"])
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/ticks.png")
#+end_src

*** Ticks

#+ATTR_LATEX: :width 0.9\textwidth
[[file:images/ticks.png]]

*** Grids

In all of the previous plots, the background has no grids, they are simply
white. If we wanted to add grid lines to the plot we use the =.grid()=
method. This function, by default, adds the major grid lines.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.linspace(-2, 2, 100)
y = np.sin(x)
z = np.tan(x)
fig, ax = plt.subplots(1, 2, figsize=(8, 3))
ax[0].plot(x, y)
ax[0].grid()
ax[1].plot(x, z)
ax[1].grid(which="both", color="r")
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/grids.png")
#+end_src

*** Grids

#+ATTR_LATEX: :width 0.9\textwidth
[[file:images/grids.png]]

*** Scale

The default behaviour of matplotlib is to plot using a linear scale. In certain
situations, we want view the plot using a different scale. For this we can use =set_yscale=.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.linspace(-2, 10, 100)
y = np.exp(x)
fig, ax = plt.subplots(1, 2, figsize=(8, 3))
ax[0].plot(x, y)
ax[0].grid()
ax[1].plot(x, y)
ax[1].set_yscale('log')
ax[1].grid()
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/scale.png")
#+end_src

#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/scale.png]]

*** Setting the plot limits

By default, matplotlib will calculate the minimum and maximum values of the
data, and use those values to set the limits of the plot. Using =set_xlim= and
=set_ylim= we can change this default behaviour.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.linspace(-2, 2, 100)
y = np.sin(x)
fig, ax = plt.subplots(1, 2, figsize=(8,3))
ax[0].plot(x, y)
ax[0].set_ylim(-1, 2)
ax[1].plot(x, y)
ax[1].set_xlim(-3, 3)
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/limits.png")
#+end_src

#+ATTR_LATEX: :width 0.7\textwidth
[[file:images/limits.png]]

*** Annotations

We can annotate our plot in a number of way:
- .axhline -- plot a horizontal line (axvline for vertical lines)/
- .annotate -- add text to the plot at a certain position.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.linspace(-2, 2, 100)
y = np.sin(x)
fig, ax = plt.subplots()
ax.plot(x, y)
ax.axhline(0, c='gray', ls='--')
ax.annotate("0th line", (-2, 0), xytext=(-1.5, 0.25),
            arrowprops=dict(facecolor='black', shrink=0.05,
                            width=0.5, headwidth=5.0))
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/annotations.png")
#+end_src


*** Annotations
#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/annotations.png]]

*** Creating a twin axes plot

Sometimes you will want to display multiple sub-plots on the same plot, but
where each have a very different range in values. Instead of having a single
y-axis, with =twinx()= we can create a two y-axis plot.

#+begin_src python :session plotting-numpy :results none :exports code
x = np.arange(10, 100)
y = np.exp(x)
z = np.log(x)

fig, ax = plt.subplots(1, 2)
ax[0].plot(x, y, label="exp(x)")
ax[0].plot(x, z, label="log(x)")
ax[0].legend()

ax2 = ax[1].twinx()
ax[1].plot(x, y)
ax2.plot(x, z, color="orange")
ax2.tick_params(axis="y", labelcolor="orange")
#+end_src

#+begin_src python :session plotting-numpy :results none :exports none
plt.savefig("images/twinx.png")
#+end_src

*** Creating a twin axes plot
#+ATTR_LATEX: :width 0.8\textwidth
[[file:images/twinx.png]]

*** Learn more

There are many many more types of plots you can create with matplotlib. I would
recommend that you read the documentation to fully appreciate everything that it
can visualise:

- Gallery -- https://matplotlib.org/stable/gallery/index.html
- Plotting tutorials -- https://matplotlib.org/stable/tutorials/index.html
- Basic plot types -- https://matplotlib.org/stable/plot_types/index.html

# Local Variables:
# org-latex-minted-options: (("frame" "lines") ("linenos=true") ("firstnumber=last") ("fontsize=\\footnotesize") ("bgcolor=LightGray") ("xleftmargin=5pt") ("tabsize=2") ("breaklines=true") ("numbersep=10pt"))
# End:
