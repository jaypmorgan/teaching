#+title: Machine Learning
#+subtitle: Lecture 2 - Linear Models
#+author: Jay Morgan
#+date: <TODO>
#+startup: beamer
#+include: ./header.org
#+property: header-args:python :session :eval never-export :results none :exports none :session :dir ./

#+name: savefig
#+begin_src python :results value replace :exports none :var name="/tmp/plot.png"
f"""import matplotlib.pyplot as plt
plt.savefig('{name}')
plt.tight_layout()
plt.close()
'{name}'
"""
#+end_src

#+RESULTS: savefig
: import matplotlib.pyplot as plt
: plt.savefig('/tmp/plot.png')
: plt.tight_layout()
: plt.close()
: '/tmp/plot.png'

#+begin_src python
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
#+end_src

* Linear Regression

** Introduction to linear models

*** Linear models

Having learnt a little about what it means to learn, we're going to look at our first
/Machine Learning/ algorithm, the staple for much of statistics, numeric prediction
using a linear model.

*** What is a linear model?
  :PROPERTIES:
  :BEAMER_OPT: fragile,allowframebreaks,label=
  :END: 

A linear model is a prediction (a response) to an input variable. We have the
following terms:

- Response/prediction -- the output of the model.
- Dependant variable -- the variable upon which the prediction is being made.

For a linear model based on one dependant we have the following:

\[
y = w x + b
\]

where $y$ is the response/output/prediction of the model, $x$ is the dependant
variable, and $w, b$ are the model parameters.

If we look at our linear model equation, we'll notice that it's the same equation for a straight line.

#+begin_src python :results value file replace :exports results :noweb strip-export
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(10)
y = 2 * x + 3
plt.plot(x, y, 'o-', label="$2x + 3$")
plt.xlabel("Dependant variable $x$")
plt.ylabel("Response $y$")
plt.legend()
<<savefig(name="images/linear_model.png")>>
#+end_src

#+ATTR_HTML: :width 700px
#+RESULTS:
[[file:images/linear_model.png]]

*** Supporting example

Let's have a look at how we would use this linear model with one of the datasets: The
Boston housing prices.

#+begin_src python
import warnings
from sklearn.datasets import load_boston
with warnings.catch_warnings():
    warnings.filterwarnings("ignore")
    boston = load_boston()
boston = pd.DataFrame(
    data=np.c_[boston['data'], boston['target']],
    columns=boston['feature_names'].tolist() + ['target'])
#+end_src

#+begin_src python :results value file replace :exports results :noweb strip-export
plt.scatter(boston.RM, boston.target)
plt.xlabel("Number of Rooms")
plt.ylabel("House Value in $1000")
<<savefig(name="images/boston_rooms_prices.png")>>
#+end_src

#+ATTR_HTML: :width 700px
#+ATTR_LATEX: :width 0.6\textwidth
#+CAPTION: Scatter plot of the number of rooms in a house against the house valuation. In this plot we can see a positive effect with some outliers to this trend.
#+RESULTS:
[[file:images/boston_rooms_prices.png]]

*** Let's fit a linear model
  :PROPERTIES:
  :BEAMER_OPT: fragile,allowframebreaks,label=
  :END: 

We have seen that there seems to be some correlation between the number of rooms and
the house price. I.e. we can use the number of rooms of the house to get the
estimated price. To get an estimated price we'll use our linear model:

\[
y = w x + b
\]

In this case, $x$ will be the number of rooms. But what values should we set for $w$
and $b$? Or put another way, what is /optimal/ value for our model parameters.

We'll return to the question of optimal later, but for now, let's just select some
random values!

\[
w = 1
\]
\[
b = 1
\]

#+begin_src python :exports results :results value file replace :noweb strip-export
plt.scatter(boston.RM, boston.target)
x = np.arange(np.min(boston.RM), np.max(boston.RM))
y = 1 * x + 1
plt.plot(x, y, 'r', label="$3 x + 5$")
plt.xlabel("Number of rooms")
plt.ylabel("House Value in $1000")
<<savefig(name="images/boston_rm_first_pred.png")>>
#+end_src

#+CAPTION: A linear model line overlayed onto the boston house prices dataset. Blue circles represent samples from the dataset, while the trend line is shown in red.
#+ATTR_HTML: :width 700px
#+RESULTS:
[[file:images/boston_rm_first_pred.png]]

Well that doesn't look very good, it could be 'fit' better to what we're seeing in
the scatter plot! I wonder how wrong the linear model is -- how incorrect our
predicted house prices are?

*** Evaluating our initial linear model
  :PROPERTIES:
  :BEAMER_OPT: fragile,allowframebreaks,label=
  :END: 

To evaluate how well, or in this case, how badly our linear model is doing, let's
compare the predicted value from the model against the actual house price. For
example, we'll take a single sample from our dataset.

If we have 4 rooms, our model estimates the house price to be $2(4) + 5 = 13$,
$13,000, but the actual cost was $24,000. This means we have underestimated the cost
by $11,000.

What we've done there is the following:

\[
\delta = | y - \hat{y} |
\]

where $\hat{y}$ is $w x + b$

We've calculated the difference or delta between the real house price $y$ and the
predicted house price.

That gives us the error for one sample though, what about for the whole dataset? Well
we could take the mean over all samples:

\[
\Delta = \sum_{i=0}^n | y - \hat{y} |
\]

#+begin_src python
y_hat = 1 * boston.RM + 1
loss  = np.mean(np.abs(boston.target - y_hat))
#+end_src

If we calculate that our linear model we see that the average difference between our
estimated value and real value is $15,000!

*** Loss curve

- If we move the weight value, then we get a different point on the curve.

*** How to select the best weights

- Lowest point on the curve.

*** Automatically computing the best weights

- Gradient descent

* Logistic Regression

** Classification

*** Moving from regression to classification

We now turn to classification

# Local Variables:
# org-latex-minted-options: (("frame" "lines") ("linenos=true") ("firstnumber=last") ("fontsize=\\footnotesize") ("bgcolor=LightGray") ("xleftmargin=5pt") ("tabsize=2") ("breaklines=true") ("numbersep=10pt"))
# End:
